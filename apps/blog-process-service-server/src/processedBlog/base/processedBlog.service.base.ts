/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ProcessedBlog as PrismaProcessedBlog } from "@prisma/client";

export class ProcessedBlogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedBlogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedBlog.count(args);
  }

  async processedBlogs(
    args: Prisma.ProcessedBlogFindManyArgs
  ): Promise<PrismaProcessedBlog[]> {
    return this.prisma.processedBlog.findMany(args);
  }
  async processedBlog(
    args: Prisma.ProcessedBlogFindUniqueArgs
  ): Promise<PrismaProcessedBlog | null> {
    return this.prisma.processedBlog.findUnique(args);
  }
  async createProcessedBlog(
    args: Prisma.ProcessedBlogCreateArgs
  ): Promise<PrismaProcessedBlog> {
    return this.prisma.processedBlog.create(args);
  }
  async updateProcessedBlog(
    args: Prisma.ProcessedBlogUpdateArgs
  ): Promise<PrismaProcessedBlog> {
    return this.prisma.processedBlog.update(args);
  }
  async deleteProcessedBlog(
    args: Prisma.ProcessedBlogDeleteArgs
  ): Promise<PrismaProcessedBlog> {
    return this.prisma.processedBlog.delete(args);
  }
}
