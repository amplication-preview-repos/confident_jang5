/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedBlogService } from "../processedBlog.service";
import { ProcessedBlogCreateInput } from "./ProcessedBlogCreateInput";
import { ProcessedBlog } from "./ProcessedBlog";
import { ProcessedBlogFindManyArgs } from "./ProcessedBlogFindManyArgs";
import { ProcessedBlogWhereUniqueInput } from "./ProcessedBlogWhereUniqueInput";
import { ProcessedBlogUpdateInput } from "./ProcessedBlogUpdateInput";

export class ProcessedBlogControllerBase {
  constructor(protected readonly service: ProcessedBlogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedBlog })
  async createProcessedBlog(
    @common.Body() data: ProcessedBlogCreateInput
  ): Promise<ProcessedBlog> {
    return await this.service.createProcessedBlog({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedBlog] })
  @ApiNestedQuery(ProcessedBlogFindManyArgs)
  async processedBlogs(
    @common.Req() request: Request
  ): Promise<ProcessedBlog[]> {
    const args = plainToClass(ProcessedBlogFindManyArgs, request.query);
    return this.service.processedBlogs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedBlog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedBlog(
    @common.Param() params: ProcessedBlogWhereUniqueInput
  ): Promise<ProcessedBlog | null> {
    const result = await this.service.processedBlog({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedBlog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedBlog(
    @common.Param() params: ProcessedBlogWhereUniqueInput,
    @common.Body() data: ProcessedBlogUpdateInput
  ): Promise<ProcessedBlog | null> {
    try {
      return await this.service.updateProcessedBlog({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedBlog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedBlog(
    @common.Param() params: ProcessedBlogWhereUniqueInput
  ): Promise<ProcessedBlog | null> {
    try {
      return await this.service.deleteProcessedBlog({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
